AWSTemplateFormatVersion: '2010-09-09'
Description: Prowler Batch
# Name : prowler-batch
# Architectural choices :
# - no user, no password, no key, only roles
# - no ssh access to compute envs

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Compute Env Network'
        Parameters: ['ComputeEnvVPC', 'ComputeEnvSubnets']
      - Label:
          default: 'Compute Env Cpu'
        Parameters: ['ComputeEnvMinCpu', 'ComputeEnvDesiredCpu', 'ComputeEnvMaxCpu', 'ComputeEnvInstanceTypes']
      - Label:
          default: 'Access to the AWS Organizations account'
        Parameters: ['ProwlerOrganizationsAccount', 'ProwlerOrganizationsRole', 'ProwlerOrganizationsRoleExternalId']
      - Label:
          default: 'Access to the spoke accounts'
        Parameters: ['ProwlerScanRole', 'ProwlerScanRoleExternalId']

Parameters:

  DisplayName:
    Description: Project name
    Type: String
    Default: prowler

  TagBlock:
    Description: Applicative block tag
    Type: String
    Default: security

  TagApp:
    Description: Application tag
    Type: String
    Default: prowler

  TagOrg:
    Description: Organization tag
    Type: String
    Default: cloudteam

  ProwlerFrequency:
    Description: define execution frequency
    Type: String
    Default: "cron(0 5 ? * * *)"

  ComputeEnvVPC:
    Description: Compute Env VPC
    Type: AWS::EC2::VPC::Id

  ComputeEnvSubnets:
    Description:  Compute Env Subnets
    Type: List<AWS::EC2::Subnet::Id>

  ComputeEnvMinCpu:
    Description: Compute Env Min CPU
    Type: Number
    Default: 0

  ComputeEnvDesiredCpu:
    Description: Compute Env Desired CPU
    Type: Number
    Default: 0

  ComputeEnvMaxCpu:
    Description: Compute Env Max CPU
    Type: Number
    Default: 2

  ComputeEnvInstanceTypes:
    Description: Compute Env Instance Types
    Type: String
    Default: optimal
    AllowedValues:
    - optimal
    - c3
    - c4

  ProwlerEcrImage:
    Description: ECR image to use
    Type: String

  ProwlerScanRole:
    Description: IAM role to assume on the spoke accounts for Prowler
    Type: String
    Default: prowler-scan-role

  ProwlerScanRoleExternalId:
    Description: ExternalId for roles on spoke accounts
    Type: String

  ProwlerOrganizationsRole:
    Description: IAM role to assume on the Organizations account for Prowler
    Type: String
    Default: prowler-organizations-role

  ProwlerOrganizationsRoleExternalId:
    Description: ExternalId of role on the Organizations account for Prowler
    Type: String

  ProwlerOrganizationsAccount:
    Description: AWS accountId using Organizations
    Type: String

  ProwlerReportingBucket:
    Description: S3 bucket for Prowler reports
    Type: String


Resources:

  ProwlerComputeEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Prowler Batch instances
      VpcId: !Ref ComputeEnvVPC
      Tags:
      - Key: Block
        Value: !Ref TagBlock
      - Key: Org
        Value: !Ref TagOrg
      - Key: App
        Value: !Ref TagApp

  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "spotfleet.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole"
      - "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole"

  ProwlerComputeEnv:
    Type: "AWS::Batch::ComputeEnvironment"
    Properties:
      Type: MANAGED
      ServiceRole: !Ref ComputeEnvironmentRole
      ComputeResources:
        MinvCpus: !Ref ComputeEnvMinCpu
        MaxvCpus: !Ref ComputeEnvMaxCpu
        DesiredvCpus: !Ref ComputeEnvDesiredCpu
        SecurityGroupIds:
          - !Ref ProwlerComputeEnvSecurityGroup
        Subnets: !Ref ComputeEnvSubnets
        Type: SPOT
        BidPercentage: 50
        SpotIamFleetRole: !Ref SpotFleetRole
        InstanceRole: !Ref EcsInstanceProfile
        InstanceTypes:
        - !Ref ComputeEnvInstanceTypes
        Tags: {Name: !Ref DisplayName, Block: !Ref TagBlock, App: !Ref TagApp, Org: !Ref TagOrg}
      State: ENABLED

  ComputeEnvironmentRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "${DisplayName}-compute-environment"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - batch.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"

  ProwlerJobQueue:
    Type: "AWS::Batch::JobQueue"
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ProwlerComputeEnv
      Priority: 1
      JobQueueName: !Sub "${DisplayName}-queue"

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "${DisplayName}-ecsinstance"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole

  EcsInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - !Ref EcsInstanceRole

  ProwlerJobDefinition:
    Type: "AWS::Batch::JobDefinition"
    Properties:
      JobDefinitionName: !Sub "${DisplayName}-job-definition"
      Type: container
      Parameters: {}
      ContainerProperties:
        Memory: 1000
        Privileged: false
        JobRoleArn: !Ref ProwlerJobRole
        ReadonlyRootFilesystem: false
        Vcpus: 1
        Image: !Ref ProwlerEcrImage
        Environment:
        - Name: REPORTING_BUCKET
          Value: !Ref ProwlerReportingBucket
        - Name: PROWLER_SCAN_ROLE
          Value: !Ref ProwlerScanRole
        - Name: PROWLER_ROLE_EXTERNALID
          Value: !Ref ProwlerScanRoleExternalId
      RetryStrategy:
        Attempts: 1

  ProwlerJobRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "${DisplayName}-jobrole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: assumeRolePolicy
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "sts:AssumeRole"
            Resource:
            - !Sub "arn:aws:iam::*:role/${ProwlerScanRole}"
      - PolicyName: writeReportsBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "s3:PutObject"
            Resource:
            - !Sub "arn:aws:s3:::${ProwlerReportingBucket}/*"

  ProwlerScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: !Ref ProwlerFrequency
      State: ENABLED
      Targets:
      - Id: "ProwlerSaturday"
        Arn: !GetAtt ProwlerJobLauncherLambda.Arn

  PermissionForRuleToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref ProwlerJobLauncherLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub ${ProwlerScheduledRule.Arn}

  ProwlerJobLauncherLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${TagApp}-lambda-invoke"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: assumeRoleOrganizationsPolicy
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "sts:AssumeRole"
            Resource:
            - !Sub "arn:aws:iam::*:role/${ProwlerOrganizationsRole}"
      - PolicyName: launch-jobs-allow
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource:
            - "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
            - batch:DescribeJobs
            - batch:ListJobs
            - batch:SubmitJob
            Resource:
            - "*"

  ProwlerLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/lambda/${TagBlock}-${TagApp}'
      RetentionInDays: 30

  ProwlerJobLauncherLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub '${TagBlock}-${TagApp}'
      Description: "Launch Prowler scan jobs"
      Handler: "index.lambda_handler"
      Code:
        ZipFile: |
                  import os
                  import json
                  import boto3

                  def lambda_handler(event, context):
                    ORGANIZATIONS_ROLE = os.environ['ORGANIZATIONS_ROLE']
                    ORGANIZATIONS_ROLE_EXTERNALID = os.environ['ORGANIZATIONS_ROLE_EXTERNALID']
                    ORGANIZATIONS_ACCOUNT = os.environ['ORGANIZATIONS_ACCOUNT']
                    session = get_session(account=ORGANIZATIONS_ACCOUNT,role=ORGANIZATIONS_ROLE, externalId=ORGANIZATIONS_ROLE_EXTERNALID,session_name='prowler_lambda')
                    accounts = getAllOrgActiveAccounts(session)
                    print("Found %s accounts to scan." % (len(accounts)))

                    client = boto3.client('batch')
                    for accountId in accounts:
                      response = client.submit_job(
                        jobName=os.environ['JOBNAME'] + "-" + accountId,
                        jobQueue=os.environ['JOBQUEUE'],
                        jobDefinition=os.environ['JOBDEFINITION'],
                        containerOverrides={
                          'environment': [
                            {
                              'name': 'ACCOUNT',
                              'value': accountId
                            },
                          ]
                        }
                      )
                      print("Job %s launched with jobId %s to scan account %s" % (response['jobName'], response['jobId'], accountId))

                  def get_session(account=None, role=None, externalId=None, region=None, session_name='my_session'):
                      # If the role is given : assumes a role and returns boto3 session
                      # otherwise : returns a regular session with the current IAM user/role
                      if role:
                          client = boto3.client('sts')
                          role_arn = 'arn:aws:iam::' + account + ':role/' + role
                          response = client.assume_role(RoleArn=role_arn, ExternalId=externalId, RoleSessionName=session_name)
                          session = boto3.Session(
                              aws_access_key_id=response['Credentials']['AccessKeyId'],
                              aws_secret_access_key=response['Credentials']['SecretAccessKey'],
                              aws_session_token=response['Credentials']['SessionToken'],
                              region_name=region)
                          return session
                      else:
                          return boto3.Session()

                  def getAllOrgActiveAccounts(session):
                      client = session.client('organizations')
                      paginator = client.get_paginator('list_accounts')
                      page_iterator = paginator.paginate()

                      activeAccountIds = []
                      for page in page_iterator:
                        if "Accounts" in page:
                          for account in page[ "Accounts" ]:
                              if account['Status'] == "ACTIVE":
                                activeAccountIds.append(account[ "Id" ])
                      return activeAccountIds
      Environment:
        Variables:
          JOBNAME: "prowler-job"
          JOBQUEUE: !Ref ProwlerJobQueue
          JOBDEFINITION: !Ref ProwlerJobDefinition
          ORGANIZATIONS_ROLE: !Ref ProwlerOrganizationsRole
          ORGANIZATIONS_ROLE_EXTERNALID: !Ref ProwlerOrganizationsRoleExternalId
          ORGANIZATIONS_ACCOUNT: !Ref ProwlerOrganizationsAccount
      MemorySize: 128
      Role: !Sub ${ProwlerJobLauncherLambdaRole.Arn}
      Runtime: "python3.7"
      Timeout: 60
      Tags:
      - Key: Block
        Value: !Ref TagBlock
      - Key: Org
        Value: !Ref TagOrg
      - Key: App
        Value: !Ref TagApp
