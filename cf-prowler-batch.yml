AWSTemplateFormatVersion: '2010-09-09'
Description: Prowler Batch
# Architectural choices :
# - no user, no password, no key, only roles
# - no ssh access to compute envs

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'ComputeEnv network'
        Parameters: ['ComputeEnvVPC', 'ComputeEnvSubnets']
      - Label:
          default: 'ComputeEnv Cpu'
        Parameters: ['ComputeEnvMinCpu', 'ComputeEnvDesiredCpu', 'ComputeEnvMaxCpu']

Parameters:

  DisplayName:
    Description: Project name
    Type: String
    Default: "prowler"

  TagBlock:
    Description: Applicative block tag
    Type: String
    Default: "security"

  TagApp:
    Description: Application tag
    Type: String
    Default: "prowler"

  TagOrg:
    Description: Organization tag
    Type: String
    Default: "cloudsecteam"

  ProwlerFrequency:
    Description: define execution frequency
    Type: String
    Default: "cron(0 5 ? * * *)"

  ComputeEnvVPC:
    Description: compute envs VPC location
    Type: AWS::EC2::VPC::Id

  ComputeEnvSubnets:
    Description: compute envs subnets location
    Type: List<AWS::EC2::Subnet::Id>

  ComputeEnvMinCpu:
    Description: compute envs VPC location
    Type: Number
    Default: 0

  ComputeEnvDesiredCpu:
    Description: compute envs VPC location
    Type: Number
    Default: 0

  ComputeEnvMaxCpu:
    Description: compute envs VPC location
    Type: Number
    Default: 2

  ProwlerEcrImage:
    Description: ECR image to use
    Type: String

  ProwlerRoleToAssume:
    Description: IAM role to assume on the spoke account to Prowler
    Type: String
    Default: prowler-scan-assumerole

  ProwlerOrganizationsRole:
    Description: IAM role to assume on the Organizations account to Prowler
    Type: String
    Default: prowler-organizations-assumerole

  ProwlerOrganizationsAccount:
    Description: AWS accountId uisng Organizations
    Type: String

  ProwlerBucket:
    Description: S3 bucket for Prowler assets
    Type: String


Resources:

  ProwlerComputeEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Prowler Batch instances
      VpcId: !Ref ComputeEnvVPC
      Tags:
      - Key: Block
        Value: !Ref TagBlock
      - Key: Org
        Value: !Ref TagOrg
      - Key: App
        Value: !Ref TagApp

  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "spotfleet.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole"
      - "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole"

  ProwlerComputeEnv:
    Type: "AWS::Batch::ComputeEnvironment"
    Properties:
      Type: MANAGED
      ServiceRole: !Ref ComputeEnvironmentRole
      ComputeResources:
        MinvCpus: !Ref ComputeEnvMinCpu
        MaxvCpus: !Ref ComputeEnvMaxCpu
        DesiredvCpus: !Ref ComputeEnvDesiredCpu
        SecurityGroupIds:
          - !Ref ProwlerComputeEnvSecurityGroup
        Subnets: !Ref ComputeEnvSubnets
        Type: SPOT
        BidPercentage: 50
        SpotIamFleetRole: !Ref SpotFleetRole
        InstanceRole: !Ref EcsInstanceProfile
        InstanceTypes:
          - c5
        Tags: {Name: !Ref DisplayName, Block: !Ref TagBlock, App: !Ref TagApp, Org: !Ref TagOrg}
      State: ENABLED

  ComputeEnvironmentRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "${DisplayName}-compute-environment"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - batch.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"

  ProwlerJobQueue:
    Type: "AWS::Batch::JobQueue"
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ProwlerComputeEnv
      Priority: 1
      JobQueueName: !Sub "${DisplayName}-queue"

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "${DisplayName}-ecsinstance"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole

  EcsInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - !Ref EcsInstanceRole

  ProwlerJobDefinition:
    Type: "AWS::Batch::JobDefinition"
    Properties:
      JobDefinitionName: !Sub "${DisplayName}-job-definition"
      Type: container
      Parameters: {}
      ContainerProperties:
        Memory: 1000
        Privileged: false
        JobRoleArn: !Ref ProwlerJobRole
        ReadonlyRootFilesystem: false
        Vcpus: 1
        Image: !Ref ProwlerEcrImage 
        Environment:
          - Name: PROWLER_BUCKET
            Value: !Ref ProwlerBucket
      RetryStrategy:
        Attempts: 1

  ProwlerJobRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "${DisplayName}-jobrole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: assumeRolePolicy
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "sts:AssumeRole"
            Resource:
            - !Sub "arn:aws:iam::*:role/${ProwlerRoleToAssume}"
      - PolicyName: writeReportsBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "s3:PutObject"
            Resource:
            - !Sub "arn:aws:s3:::${ProwlerBucket}/reports/*"

  ProwlerScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: !Ref ProwlerFrequency
      State: ENABLED
      Targets:
      - Id: "ProwlerSaturday"
        Arn: !GetAtt ProwlerJobLauncherLambda.Arn

  PermissionForRuleToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref ProwlerJobLauncherLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub ${ProwlerScheduledRule.Arn}

  ProwlerJobLauncherLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${TagApp}-lambda-invoke"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: assumeRoleOrganizationsPolicy
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "sts:AssumeRole"
            Resource:
            - !Sub "arn:aws:iam::*:role/${ProwlerOrganizationsRole}"
      - PolicyName: accessConfigBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "s3:GetObject"
            Resource:
            - !Sub "arn:aws:s3:::${ProwlerBucket}/config/accounts.list"
      - PolicyName: launch-jobs-allow
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource:
            - "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
            - batch:DescribeJobs
            - batch:ListJobs
            - batch:SubmitJob
            Resource:
            - "*"

  ProwlerLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub '/aws/lambda/${TagBlock}-${TagApp}' 
      RetentionInDays: 30

  ProwlerJobLauncherLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Sub '${TagBlock}-${TagApp}'
      Description: "Launch Prowler scan jobs"
      Handler: "index.lambda_handler"
      Code:
        ZipFile: |
                  import os
                  import json
                  import boto3
                  def lambda_handler(event, context):
                    
                    PROWLER_ROLE_TO_ASSUME = os.environ['PROWLER_ROLE_TO_ASSUME']
                    ORGANIZATIONS_ROLE = os.environ['ORGANIZATIONS_ROLE']
                    ORGANIZATIONS_ACCOUNT = os.environ['ORGANIZATIONS_ACCOUNT']
                    session = get_session(role=ORGANIZATIONS_ROLE, account=ORGANIZATIONS_ACCOUNT, session_name='prowler_lambda')
                    accounts = getAllActiveAccounts(session)
                    print("Found %s accounts to scan." % (len(accounts)))

                    client = boto3.client('batch')
                    for accountId in accounts:
                      response = client.submit_job(
                        jobName=os.environ['JOBNAME'] + "-" + accountId,
                        jobQueue=os.environ['JOBQUEUE'],
                        jobDefinition=os.environ['JOBDEFINITION'],
                        containerOverrides={
                          'environment': [
                            {
                              'name': 'ACCOUNT',
                              'value': accountId
                            },
                            {
                              'name': 'PROWLER_ROLE_TO_ASSUME',
                              'value': PROWLER_ROLE_TO_ASSUME
                            },
                          ]
                        }
                      )
                      print("Job %s launched with jobId %s to scan account %s with role %s" % (response['jobName'], response['jobId'], accountId, PROWLER_ROLE_TO_ASSUME))
                    
                  def get_session(role=None, account=None, region=None, session_name='my_session'):
                  
                      # If the role is given : assumes a role and returns boto3 session
                      # otherwise : returns a regular session with the current IAM user/role
                      if role:
                          client = boto3.client('sts')
                          role_arn = 'arn:aws:iam::' + account + ':role/' + role
                          response = client.assume_role(RoleArn=role_arn, RoleSessionName=session_name)
                          session = boto3.Session(
                              aws_access_key_id=response['Credentials']['AccessKeyId'],
                              aws_secret_access_key=response['Credentials']['SecretAccessKey'],
                              aws_session_token=response['Credentials']['SessionToken'],
                              region_name=region)
                          return session
                      else:
                          return boto3.Session()
                            
                  def getAllActiveAccounts(session):
                    
                      client = session.client('organizations')
                      paginator = client.get_paginator('list_accounts')
                      page_iterator = paginator.paginate()
                        
                      activeAccountIds = []
                      for page in page_iterator:
                        if "Accounts" in page:
                          for account in page[ "Accounts" ]:
                              if account['Status'] == "ACTIVE":
                                activeAccountIds.append(account[ "Id" ])
                      return activeAccountIds
                        
                  def retreiveAccountList():
                    CONFIGFILE_BUCKET = os.environ['CONFIGFILE_BUCKET']
                    CONFIGFILE_NAME = os.environ['CONFIGFILE_NAME']
                    tempFile = '/tmp/accounts.list'
                    accountList=[]
                      
                    s3client = boto3.client('s3')
                    s3client.download_file(CONFIGFILE_BUCKET, CONFIGFILE_NAME, tempFile)
                    for line in open(tempFile):
                      li=line.strip()
                      if not li.startswith("#"):
                        accountList.append(line.rstrip())
                    return accountList
      Environment:
        Variables:
          JOBNAME: "prowler-job"
          JOBQUEUE: !Ref ProwlerJobQueue
          JOBDEFINITION: !Ref ProwlerJobDefinition
          CONFIGFILE_BUCKET: !Ref ProwlerBucket
          CONFIGFILE_NAME: "config/accounts.list"
          PROWLER_ROLE_TO_ASSUME: !Ref ProwlerRoleToAssume
          ORGANIZATIONS_ROLE: !Ref ProwlerOrganizationsRole
          ORGANIZATIONS_ACCOUNT: !Ref ProwlerOrganizationsAccount
      MemorySize: 128
      Role: !Sub ${ProwlerJobLauncherLambdaRole.Arn}
      Runtime: "python3.6"
      Timeout: 60
      Tags:
      - Key: Block
        Value: !Ref TagBlock
      - Key: Org
        Value: !Ref TagOrg
      - Key: App
        Value: !Ref TagApp

